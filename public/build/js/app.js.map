{"version":3,"sources":["app.js","comments/commentFactory.js","clients/clientFactory.js","projects/estimateFactory.js","projects/projectController.js","projects/projectFactory.js","reports/dashboardController.js","reports/reportController.js","timeEntry/timeEntryFact.js"],"names":[],"mappingsxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACphDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"app.js","sourcesContent":["var myApp = angular.module('myApp', [\n    'ngRoute',\n    'oi.select',\n    '720kb.datepicker',\n    'chart.js',\n    'angular.snackbar',\n    'angular-loading-bar',\n    'textAngular'\n]);\n\nmyApp.filter('unsafe', function($sce) { return $sce.trustAsHtml; });\n\nmyApp.controller('globalController', ['$scope', '$location',\n    function($scope, $location) {\n        angular.extend($scope, {\n            reportTabUrl: '/templates/manager/reportTabs.html',\n            singleProjectTab: '/templates/projects/singleProjectTab.html',\n            checkActiveLink: function(currLink) {\n                if ($location.path() == currLink) {\n                    return 'active';\n                }\n            },\n            timeAgo: function(string) {\n                return moment(string).fromNow();\n            }\n        })\n    }\n]);\n\n/*Routes*/\nmyApp.config(['$routeProvider', '$locationProvider',\n    function($routeProvider, $locationProvider) {\n        $routeProvider.when('/', {\n            templateUrl: '/templates/manager/managerReports.html',\n            controller: 'dashboardController'\n        });\n\n        $routeProvider.when('/report', {\n            templateUrl: '/templates/manager/reports.html',\n            controller: 'reportController'\n        });\n\n        $routeProvider.when('/projects', {\n            templateUrl: '/templates/projects/projects-listing.html',\n            controller: 'projectController',\n            resolve: {\n                action: function(projectFactory) {\n                    return {\n                        projects: projectFactory.getProjectList()\n                    }\n                }\n            }\n        });\n\n        $routeProvider.when('/projects/add', {\n            templateUrl: '/templates/projects/add-project.html',\n            controller: 'projectController',\n            resolve: {\n                action: function(clientFactory) {\n                    return {\n                        clients: clientFactory.getClientList()\n                    }\n                }\n            }\n        });\n\n        $routeProvider.when('/projects/:id', {\n            templateUrl: '/templates/projects/projects-details.html',\n            controller: 'projectController',\n            resolve: {\n                action: function() {\n                    return 'single';\n                }\n            }\n        });\n\n        $routeProvider.when('/projects/:pid/comments', {\n            templateUrl: '/templates/projects/project-comments.html',\n            controller: 'projectController',\n            resolve: {\n                action: function(commentFactory, $route) {\n                    return {\n                        comments: commentFactory.getProjectComments($route.current.params.pid)\n                    };\n                }\n            }\n        });\n\n        $routeProvider.when('/projects/:id/estimate/add', {\n            templateUrl: '/templates/projects/project-estimate-add.html',\n            controller: 'projectController',\n            resolve: {\n                action: function() {\n                    return 'single';\n                }\n            }\n        });\n\n        $routeProvider.when('/projects/estimate/:estimateId', {\n            templateUrl: '/templates/projects/estimate-edit.html',\n            controller: 'projectController',\n            resolve: {\n                action: function() {\n                    return 'single';\n                }\n            }\n        });\n\n        $routeProvider.otherwise('/');\n    }\n]);\n","/**\n * Created by amitav on 12/13/15.\n */\nmyApp.factory('commentFactory', ['$http', function($http) {\n    var commentFactory = {};\n\n    commentFactory.getProjectComments = function(projectId) {\n        console.log('Project id', projectId);\n        return $http.get(baseUrl + 'api/get-project-comments/' + projectId);\n    }\n\n    commentFactory.saveComment = function (commentData) {\n        return $http({\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            url: baseUrl + 'api/save-project-comment',\n            method: 'POST',\n            data: commentData\n        });\n    }\n\n    return commentFactory;\n}]);\n","myApp.factory('clientFactory', ['$http', function($http) {\n    var clientFactory = {};\n\n    clientFactory.getClientList = function() {\n        return $http.get(baseUrl + 'api/get-client-list');\n    }\n\n    return clientFactory;\n}]);\n","myApp.factory('estimateFactory', ['$http', function($http) {\n    var estimateFactory = {};\n\n    estimateFactory.getEstimateById = function(id) {\n        return $http.get(baseUrl + 'api/get-estimate-by-id/' + id);\n    }\n\n    estimateFactory.updateEstimate = function(estimateData) {\n        return $http({\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            url: baseUrl + 'api/update-estimate-by-id',\n            method: 'POST',\n            data: estimateData\n        });\n    }\n\n    return estimateFactory;\n}])\n","myApp.controller('projectController', ['$scope', 'projectFactory', '$routeParams', 'snackbar', '$location', 'action', 'clientFactory', 'estimateFactory', 'timeEntry', 'commentFactory',\n\n    function ($scope, projectFactory, $routeParams, snackbar, $location, action, clientFactory, estimateFactory, timeEntry, commentFactory) {\n\n        /*loading all projects*/\n        if (action && action.projects != undefined) {\n            action.projects.success(function (response) {\n                console.log('all projects', response);\n                $scope.projects = response;\n            });\n        }\n\n        if (action && action.clients != undefined) {\n            action.clients.success(function (response) {\n                console.log('all clients', response);\n                $scope.clients = response;\n            });\n        }\n\n        /*Loading the comments for a project*/\n        if (action && action.comments != undefined) {\n            $scope.singleProjectId = $routeParams.pid;\n            action.comments.success(function (response) {\n                console.log('all comments', response);\n                $scope.singleProject = response;\n                $scope.comments = response;\n            });\n        }\n\n        /*load single project data*/\n        if ($routeParams.id) {\n            $scope.singleProjectId = $routeParams.id;\n            projectFactory.getProjectById($routeParams.id).success(function (response) {\n                console.log('Single project', response);\n                $scope.singleProject = response;\n                $scope.showSingleProject = true;\n            });\n        }\n\n        if ($routeParams.estimateId) {\n\n            /*Get the estimate details by id*/\n            estimateFactory.getEstimateById($routeParams.estimateId).success(function (response) {\n                console.log('Need to load estimate', response);\n                $scope.singleEstimate = response;\n\n                /*Get the project details by id*/\n                projectFactory.getProjectById(response.project_id).success(function (response) {\n                    console.log('Single project', response);\n                    $scope.singleProject = response;\n                    $scope.showSingleEstimate = true;\n\n                    /*Get time entries for the estimate*/\n                    timeEntry.getEntriesForEstimate($scope.singleEstimate.id).success(function (response) {\n                        $scope.estimateTimes = response;\n                        console.log('Time entries', response);\n                    });\n                });\n            });\n        }\n\n        angular.extend($scope, {\n            singleProject: {},\n            showSingleProject: false,\n            showSingleEstimate: false,\n            newEstimateFormSubmit: false,\n            projectEstimte: {},\n            singleEstimate: {},\n            newProject: {}\n        });\n\n        angular.extend($scope, {\n            saveComment: function (addCommentForm) {\n                if (addCommentForm.$valid) {\n                    console.log($scope.newComment, $routeParams.pid);\n                    var commentData = {\n                        comment: $scope.newComment,\n                        project_id: $routeParams.pid\n                    };\n                    commentFactory.saveComment(commentData).success(function (response) {\n                        console.log(response);\n                        $scope.singleProject = response;\n                        $scope.comments = response;\n                        $scope.newComment = \"\";\n                    });\n                } else {\n                    $scope.newEstimateFormSubmit = true;\n                    snackbar.create(\"Your form has errors!!\", 1000);\n                }\n            },\n            deleteProject: function () {\n                var r = confirm(\"This will delete the project and it's time. Ok?\");\n                if (r === true) {\n                    projectFactory.deleteProject($routeParams.id).success(function (response) {\n                        $location.path('/projects');\n                        snackbar.create(\"Project deleted\", 1000);\n                    });\n                }\n            },\n            editEstiate: function (editEstimateForm) {\n                if (editEstimateForm.$valid) {\n                    var estimateData = {\n                        id: $scope.singleEstimate.id,\n                        desc: $scope.singleEstimate.desc,\n                        hours_allocated: $scope.singleEstimate.hours_allocated,\n                        status: $scope.singleEstimate.status\n                    };\n\n                    estimateFactory.updateEstimate(estimateData).success(function (response) {\n                        console.log('estimate edited', response);\n                        $location.path('/projects/' + $scope.singleProject.id);\n                        snackbar.create(\"Estimate saved\", 1000);\n                    });\n                } else {\n                    $scope.newEstimateFormSubmit = true;\n                    snackbar.create(\"Your form has errors!!\", 1000);\n                }\n            },\n            addNewProject: function (addProjectForm) {\n                if (addProjectForm.$valid) {\n                    console.log($scope.newProject);\n                    var newProjectData = {\n                        name: $scope.newProject.name,\n                        client: $scope.newProject.client_id[0].id\n                    };\n                    projectFactory.saveNewProject(newProjectData).success(function (response) {\n                        console.log('save new project', response);\n                        $location.path('/projects');\n                        snackbar.create(\"Project added\", 1000);\n                    })\n                } else {\n                    $scope.newEstimateFormSubmit = true;\n                    snackbar.create(\"Your form has errors!!\", 1000);\n                }\n            },\n            saveProjectEstimate: function (addProjectEstimateForm) {\n                if (addProjectEstimateForm.$valid) {\n                    console.log('$scope.projectEstimte', $scope.projectEstimte);\n                    var estimateData = {\n                        project_id: $routeParams.id,\n                        desc: $scope.projectEstimte.desc,\n                        hours_allocated: $scope.projectEstimte.hours_allocated,\n                    };\n\n                    projectFactory.saveProjectEstimate(estimateData).success(function (response) {\n                        console.log(response);\n                        $location.path('/projects/' + $routeParams.id);\n                        snackbar.create(\"Estimate added\", 1000);\n                    });\n                } else {\n                    $scope.newEstimateFormSubmit = true;\n                    snackbar.create(\"Your form has errors!!\", 1000);\n                }\n            }\n        });\n    }\n]);\n","myApp.factory('projectFactory', ['$http', function($http) {\n    var projectFactory = {};\n\n    projectFactory.getProjectList = function() {\n        return $http.get(baseUrl + 'api/get-project-list');\n    }\n\n    projectFactory.getProjectById = function(id) {\n        return $http.get(baseUrl + 'api/get-project-by-id/' + id);\n    }\n\n    projectFactory.saveProjectEstimate = function(estimateData) {\n        return $http({\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            url: baseUrl + 'api/save-project-estimate',\n            method: 'POST',\n            data: estimateData\n        });\n    }\n\n    projectFactory.saveNewProject = function(newProjectData) {\n        return $http({\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            url: baseUrl + 'api/save-new-project',\n            method: 'POST',\n            data: newProjectData\n        });\n    }\n\n    projectFactory.deleteProject = function(id) {\n        return $http({\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            url: baseUrl + 'api/delete-project',\n            method: 'POST',\n            data: {\n                id: id\n            }\n        });\n    }\n\n    return projectFactory;\n}]);\n","myApp.controller('dashboardController', ['$scope', 'timeEntry', '$parse',\n    function($scope, timeEntry, $parse) {\n        timeEntry.getTimeSheetEntryByDate().success(function(response) {\n            $scope.timeEntryOverview = response;\n        });\n\n        angular.extend($scope, {\n            graphLabels: {}\n        });\n\n        angular.extend($scope, {\n            changeTag: function(url) {\n                $scope.tabUrl = url;\n            }\n        });\n\n        $scope.labels = [\"Download Sales\", \"In-Store Sales\", \"Mail-Order Sales\"];\n        $scope.data = [300, 500, 100];\n    }\n]);\n","myApp.controller('reportController', ['$scope', 'timeEntry', '$timeout', 'projectFactory',\n    function($scope, timeEntry, $timeout, projectFactory) {\n\n        timeEntry.getEntries().then(function(response) {\n                console.log('time entries', response.data);\n                $scope.timeEntries = response.data;\n                angular.forEach(response.data, function(value, key) {\n                    $scope.totalTime = $scope.totalTime + value.time;\n                });\n                return response;\n            })\n            .then(function() {\n                timeEntry.getUserList().then(function(response) {\n                    console.log('user list', response.data);\n                    angular.forEach(response.data, function(value, key) {\n                        $scope.users.push(value);\n                    });\n                });\n            })\n            .then(function() {\n                projectFactory.getProjectList().then(function(response) {\n                    console.log('project list', response.data);\n                    angular.forEach(response.data, function(value, key) {\n                        $scope.projects.push(value);\n                    });\n\n                    $timeout(function() {\n                        $scope.showData = true;\n                    }, 500);\n                });\n            });\n\n        angular.extend($scope, {\n            totalTime: 0,\n            showData: false,\n            filters: {},\n            users: [],\n            projects: [],\n            dt: new Date()\n        });\n\n        angular.extend($scope, {\n            filterTime: function(filterTimeFrm) {\n                console.log($scope.filters);\n                var queryParams = {};\n\n                if ($scope.filters.desc != \"\") {\n                    queryParams.desc = $scope.filters.desc;\n                }\n\n                if ($scope.filters.users !== undefined && $scope.filters.users.length > 0) {\n                    queryParams.users = [];\n                    angular.forEach($scope.filters.users, function(value, key) {\n                        queryParams.users.push(value.id);\n                    });\n                }\n\n                if ($scope.filters.project !== undefined && $scope.filters.project.length > 0) {\n                    queryParams.projects = [];\n                    angular.forEach($scope.filters.project, function(value, key) {\n                        queryParams.projects.push(value.id);\n                    });\n                }\n\n                if ($scope.filters.startDate !== undefined) {\n                    queryParams.startDate = $scope.filters.startDate;\n                }\n\n                if ($scope.filters.endDate !== undefined) {\n                    queryParams.endDate = $scope.filters.endDate;\n                    var startDateOfYear = moment(queryParams.startDate).dayOfYear();\n                    var endDateOfYear = moment(queryParams.endDate).dayOfYear();\n\n                    console.log(startDateOfYear, endDateOfYear);\n\n                    if ($scope.filters.startDate !== undefined && endDateOfYear < startDateOfYear) {\n                        alert('End date is before start date.');\n                        return false;\n                    }\n                }\n\n                timeEntry.getSearchResult(queryParams).then(function(response) {\n                    console.log('search result', response.data);\n                    $scope.timeEntries = response.data;\n                    $scope.totalTime = 0;\n                    angular.forEach(response.data, function(value, key) {\n                        $scope.totalTime = $scope.totalTime + value.time;\n                    });\n                });\n            },\n            clearFilters: function() {\n                $scope.filters = {};\n            }\n        });\n    }\n]);\n","myApp.factory('timeEntry', ['$http', function($http) {\n    var timeEntry = {};\n\n    timeEntry.getEntries = function() {\n        return $http.get(baseUrl + 'api/time-report');\n    }\n\n    timeEntry.getUserList = function() {\n        return $http.get(baseUrl + 'api/get-user-list');\n    }\n\n    timeEntry.getSearchResult = function(filterParams) {\n        return $http({\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            url: baseUrl + 'api/time-report-filter',\n            method: 'POST',\n            data: filterParams\n        });\n    }\n\n    timeEntry.getTimeSheetEntryByDate = function() {\n        return $http.get(baseUrl + 'api/get-timeentry-by-date');\n    }\n\n    timeEntry.getEntriesForEstimate = function(estimateId) {\n        return $http.get(baseUrl + 'api/get-timeentry-for-estimate/' + estimateId);\n    }\n\n    return timeEntry;\n}]);\n"],"sourceRoot":"/source/"}